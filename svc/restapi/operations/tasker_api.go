// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewTaskerAPI creates a new Tasker instance
func NewTaskerAPI(spec *loads.Document) *TaskerAPI {
	return &TaskerAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer: runtime.JSONConsumer(),

		JSONProducer: runtime.JSONProducer(),

		CreateProjectHandler: CreateProjectHandlerFunc(func(params CreateProjectParams) middleware.Responder {
			return middleware.NotImplemented("operation CreateProject has not yet been implemented")
		}),
		CreateTaskHandler: CreateTaskHandlerFunc(func(params CreateTaskParams) middleware.Responder {
			return middleware.NotImplemented("operation CreateTask has not yet been implemented")
		}),
		CreateTaskTodoHandler: CreateTaskTodoHandlerFunc(func(params CreateTaskTodoParams) middleware.Responder {
			return middleware.NotImplemented("operation CreateTaskTodo has not yet been implemented")
		}),
		DeleteProjectHandler: DeleteProjectHandlerFunc(func(params DeleteProjectParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteProject has not yet been implemented")
		}),
		DeleteTaskHandler: DeleteTaskHandlerFunc(func(params DeleteTaskParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteTask has not yet been implemented")
		}),
		DeleteTodoHandler: DeleteTodoHandlerFunc(func(params DeleteTodoParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteTodo has not yet been implemented")
		}),
		GetPingHandler: GetPingHandlerFunc(func(params GetPingParams) middleware.Responder {
			return middleware.NotImplemented("operation GetPing has not yet been implemented")
		}),
		GetProjectHandler: GetProjectHandlerFunc(func(params GetProjectParams) middleware.Responder {
			return middleware.NotImplemented("operation GetProject has not yet been implemented")
		}),
		GetProjectsHandler: GetProjectsHandlerFunc(func(params GetProjectsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetProjects has not yet been implemented")
		}),
		GetTaskTodosHandler: GetTaskTodosHandlerFunc(func(params GetTaskTodosParams) middleware.Responder {
			return middleware.NotImplemented("operation GetTaskTodos has not yet been implemented")
		}),
		GetTasksHandler: GetTasksHandlerFunc(func(params GetTasksParams) middleware.Responder {
			return middleware.NotImplemented("operation GetTasks has not yet been implemented")
		}),
		SetTodoStatusHandler: SetTodoStatusHandlerFunc(func(params SetTodoStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation SetTodoStatus has not yet been implemented")
		}),
	}
}

/*TaskerAPI as in title */
type TaskerAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// CreateProjectHandler sets the operation handler for the create project operation
	CreateProjectHandler CreateProjectHandler
	// CreateTaskHandler sets the operation handler for the create task operation
	CreateTaskHandler CreateTaskHandler
	// CreateTaskTodoHandler sets the operation handler for the create task todo operation
	CreateTaskTodoHandler CreateTaskTodoHandler
	// DeleteProjectHandler sets the operation handler for the delete project operation
	DeleteProjectHandler DeleteProjectHandler
	// DeleteTaskHandler sets the operation handler for the delete task operation
	DeleteTaskHandler DeleteTaskHandler
	// DeleteTodoHandler sets the operation handler for the delete todo operation
	DeleteTodoHandler DeleteTodoHandler
	// GetPingHandler sets the operation handler for the get ping operation
	GetPingHandler GetPingHandler
	// GetProjectHandler sets the operation handler for the get project operation
	GetProjectHandler GetProjectHandler
	// GetProjectsHandler sets the operation handler for the get projects operation
	GetProjectsHandler GetProjectsHandler
	// GetTaskTodosHandler sets the operation handler for the get task todos operation
	GetTaskTodosHandler GetTaskTodosHandler
	// GetTasksHandler sets the operation handler for the get tasks operation
	GetTasksHandler GetTasksHandler
	// SetTodoStatusHandler sets the operation handler for the set todo status operation
	SetTodoStatusHandler SetTodoStatusHandler
	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *TaskerAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *TaskerAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *TaskerAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *TaskerAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *TaskerAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *TaskerAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *TaskerAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the TaskerAPI
func (o *TaskerAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.CreateProjectHandler == nil {
		unregistered = append(unregistered, "CreateProjectHandler")
	}
	if o.CreateTaskHandler == nil {
		unregistered = append(unregistered, "CreateTaskHandler")
	}
	if o.CreateTaskTodoHandler == nil {
		unregistered = append(unregistered, "CreateTaskTodoHandler")
	}
	if o.DeleteProjectHandler == nil {
		unregistered = append(unregistered, "DeleteProjectHandler")
	}
	if o.DeleteTaskHandler == nil {
		unregistered = append(unregistered, "DeleteTaskHandler")
	}
	if o.DeleteTodoHandler == nil {
		unregistered = append(unregistered, "DeleteTodoHandler")
	}
	if o.GetPingHandler == nil {
		unregistered = append(unregistered, "GetPingHandler")
	}
	if o.GetProjectHandler == nil {
		unregistered = append(unregistered, "GetProjectHandler")
	}
	if o.GetProjectsHandler == nil {
		unregistered = append(unregistered, "GetProjectsHandler")
	}
	if o.GetTaskTodosHandler == nil {
		unregistered = append(unregistered, "GetTaskTodosHandler")
	}
	if o.GetTasksHandler == nil {
		unregistered = append(unregistered, "GetTasksHandler")
	}
	if o.SetTodoStatusHandler == nil {
		unregistered = append(unregistered, "SetTodoStatusHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *TaskerAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *TaskerAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	return nil
}

// Authorizer returns the registered authorizer
func (o *TaskerAPI) Authorizer() runtime.Authorizer {
	return nil
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *TaskerAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *TaskerAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *TaskerAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the tasker API
func (o *TaskerAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *TaskerAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/project"] = NewCreateProject(o.context, o.CreateProjectHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/task"] = NewCreateTask(o.context, o.CreateTaskHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/task/{taskId}/todo"] = NewCreateTaskTodo(o.context, o.CreateTaskTodoHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/project/{projectId}"] = NewDeleteProject(o.context, o.DeleteProjectHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/task/{taskId}"] = NewDeleteTask(o.context, o.DeleteTaskHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/todo/{todoId}"] = NewDeleteTodo(o.context, o.DeleteTodoHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/ping"] = NewGetPing(o.context, o.GetPingHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/project/{projectId}"] = NewGetProject(o.context, o.GetProjectHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/project"] = NewGetProjects(o.context, o.GetProjectsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/task/{taskId}"] = NewGetTaskTodos(o.context, o.GetTaskTodosHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/task"] = NewGetTasks(o.context, o.GetTasksHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/todo/{todoId}/status"] = NewSetTodoStatus(o.context, o.SetTodoStatusHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *TaskerAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *TaskerAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *TaskerAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *TaskerAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *TaskerAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[method][path] = builder(h)
	}
}
