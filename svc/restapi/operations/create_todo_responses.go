// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/ju-zp/tasker/svc/models"
)

// CreateTodoOKCode is the HTTP code returned for type CreateTodoOK
const CreateTodoOKCode int = 200

/*CreateTodoOK Created todo

swagger:response createTodoOK
*/
type CreateTodoOK struct {

	/*
	  In: Body
	*/
	Payload *models.Todo `json:"body,omitempty"`
}

// NewCreateTodoOK creates CreateTodoOK with default headers values
func NewCreateTodoOK() *CreateTodoOK {

	return &CreateTodoOK{}
}

// WithPayload adds the payload to the create todo o k response
func (o *CreateTodoOK) WithPayload(payload *models.Todo) *CreateTodoOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create todo o k response
func (o *CreateTodoOK) SetPayload(payload *models.Todo) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateTodoOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateTodoBadRequestCode is the HTTP code returned for type CreateTodoBadRequest
const CreateTodoBadRequestCode int = 400

/*CreateTodoBadRequest Incomplete data

swagger:response createTodoBadRequest
*/
type CreateTodoBadRequest struct {

	/*Body of the request was Incomplete
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewCreateTodoBadRequest creates CreateTodoBadRequest with default headers values
func NewCreateTodoBadRequest() *CreateTodoBadRequest {

	return &CreateTodoBadRequest{}
}

// WithPayload adds the payload to the create todo bad request response
func (o *CreateTodoBadRequest) WithPayload(payload string) *CreateTodoBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create todo bad request response
func (o *CreateTodoBadRequest) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateTodoBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
