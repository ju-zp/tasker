// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/ju-zp/tasker/integration/services/tasker/models"
)

// GetTaskTodosReader is a Reader for the GetTaskTodos structure.
type GetTaskTodosReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTaskTodosReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetTaskTodosOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetTaskTodosOK creates a GetTaskTodosOK with default headers values
func NewGetTaskTodosOK() *GetTaskTodosOK {
	return &GetTaskTodosOK{}
}

/*GetTaskTodosOK handles this case with default header values.

Get the todos associated to a task
*/
type GetTaskTodosOK struct {
	Payload *GetTaskTodosOKBody
}

func (o *GetTaskTodosOK) Error() string {
	return fmt.Sprintf("[GET /task/{taskId}][%d] getTaskTodosOK  %+v", 200, o.Payload)
}

func (o *GetTaskTodosOK) GetPayload() *GetTaskTodosOKBody {
	return o.Payload
}

func (o *GetTaskTodosOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetTaskTodosOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetTaskTodosOKBody the task and associated todos
swagger:model GetTaskTodosOKBody
*/
type GetTaskTodosOKBody struct {

	// task
	Task *models.Task `json:"task,omitempty"`

	// Array of todos
	Todos []*models.Todo `json:"todos"`
}

// Validate validates this get task todos o k body
func (o *GetTaskTodosOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTask(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTodos(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTaskTodosOKBody) validateTask(formats strfmt.Registry) error {

	if swag.IsZero(o.Task) { // not required
		return nil
	}

	if o.Task != nil {
		if err := o.Task.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTaskTodosOK" + "." + "task")
			}
			return err
		}
	}

	return nil
}

func (o *GetTaskTodosOKBody) validateTodos(formats strfmt.Registry) error {

	if swag.IsZero(o.Todos) { // not required
		return nil
	}

	for i := 0; i < len(o.Todos); i++ {
		if swag.IsZero(o.Todos[i]) { // not required
			continue
		}

		if o.Todos[i] != nil {
			if err := o.Todos[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getTaskTodosOK" + "." + "todos" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTaskTodosOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTaskTodosOKBody) UnmarshalBinary(b []byte) error {
	var res GetTaskTodosOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
