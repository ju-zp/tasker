// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/ju-zp/tasker/integration/services/tasker/models"
)

// GetProjectReader is a Reader for the GetProject structure.
type GetProjectReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetProjectReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetProjectOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetProjectOK creates a GetProjectOK with default headers values
func NewGetProjectOK() *GetProjectOK {
	return &GetProjectOK{}
}

/*GetProjectOK handles this case with default header values.

successful request
*/
type GetProjectOK struct {
	Payload *GetProjectOKBody
}

func (o *GetProjectOK) Error() string {
	return fmt.Sprintf("[GET /project/{projectId}][%d] getProjectOK  %+v", 200, o.Payload)
}

func (o *GetProjectOK) GetPayload() *GetProjectOKBody {
	return o.Payload
}

func (o *GetProjectOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetProjectOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetProjectOKBody get project o k body
swagger:model GetProjectOKBody
*/
type GetProjectOKBody struct {

	// project
	Project *models.Project `json:"project,omitempty"`

	// tasks
	Tasks []*models.TaskTodos `json:"tasks"`
}

// Validate validates this get project o k body
func (o *GetProjectOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateProject(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTasks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetProjectOKBody) validateProject(formats strfmt.Registry) error {

	if swag.IsZero(o.Project) { // not required
		return nil
	}

	if o.Project != nil {
		if err := o.Project.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getProjectOK" + "." + "project")
			}
			return err
		}
	}

	return nil
}

func (o *GetProjectOKBody) validateTasks(formats strfmt.Registry) error {

	if swag.IsZero(o.Tasks) { // not required
		return nil
	}

	for i := 0; i < len(o.Tasks); i++ {
		if swag.IsZero(o.Tasks[i]) { // not required
			continue
		}

		if o.Tasks[i] != nil {
			if err := o.Tasks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getProjectOK" + "." + "tasks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetProjectOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetProjectOKBody) UnmarshalBinary(b []byte) error {
	var res GetProjectOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
