// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/ju-zp/tasker/integration/services/tasker/models"
)

// CreateTaskReader is a Reader for the CreateTask structure.
type CreateTaskReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateTaskReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateTaskOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateTaskBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateTaskOK creates a CreateTaskOK with default headers values
func NewCreateTaskOK() *CreateTaskOK {
	return &CreateTaskOK{}
}

/*CreateTaskOK handles this case with default header values.

Created task
*/
type CreateTaskOK struct {
	Payload *models.Task
}

func (o *CreateTaskOK) Error() string {
	return fmt.Sprintf("[POST /task][%d] createTaskOK  %+v", 200, o.Payload)
}

func (o *CreateTaskOK) GetPayload() *models.Task {
	return o.Payload
}

func (o *CreateTaskOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Task)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateTaskBadRequest creates a CreateTaskBadRequest with default headers values
func NewCreateTaskBadRequest() *CreateTaskBadRequest {
	return &CreateTaskBadRequest{}
}

/*CreateTaskBadRequest handles this case with default header values.

Incomplete data
*/
type CreateTaskBadRequest struct {
	Payload string
}

func (o *CreateTaskBadRequest) Error() string {
	return fmt.Sprintf("[POST /task][%d] createTaskBadRequest  %+v", 400, o.Payload)
}

func (o *CreateTaskBadRequest) GetPayload() string {
	return o.Payload
}

func (o *CreateTaskBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*CreateTaskBody create task body
swagger:model CreateTaskBody
*/
type CreateTaskBody struct {

	// id of project task belongs to
	// Required: true
	ProjectID *string `json:"projectId"`

	// Title of task
	// Required: true
	Title *string `json:"title"`
}

// Validate validates this create task body
func (o *CreateTaskBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateTaskBody) validateProjectID(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"projectId", "body", o.ProjectID); err != nil {
		return err
	}

	return nil
}

func (o *CreateTaskBody) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"title", "body", o.Title); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateTaskBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateTaskBody) UnmarshalBinary(b []byte) error {
	var res CreateTaskBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
