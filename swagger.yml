consumes:
- application/json
info:
  description: as in title
  title: Just a Todo
  version: 1.0.0
produces:
- application/json
schemes:
- http
swagger: "2.0"
#
parameters:
  path_projectId:
    in: path
    name: projectId
    type: string
    required: true
    description: ID of a project
  path_taskId:
    in: path
    name: taskId
    type: string
    required: true
    description: ID of a task
  path_todoId:
    in: path
    name: todoId
    type: string
    required: true
    description: ID of a todo
#
definitions:
  todo:
    type: object
    required:
      - todo
      - done
      - id
    properties:
      id:
        type: integer
        format: int64
        readOnly: true
      taskId:
        type: integer
        format: int64
        description: "task it is associated with"
      todo:
        type: string
        description: "the content of the todo"
      done:
        type: boolean
  todoStatus:
    type: object
    required:
      - status
    properties:
      status:
        type: boolean
  task:
    type: object
    required:
      - title
    properties:
      id:
        type: integer
        format: int64
        readOnly: true
      projectId:
        type: integer
        format: int64
        description: "project it is associated with"
      title:
        type: string
        description: "title of a task"
      done:
        type: boolean
  taskTodos:
    type: object
    properties:
      task:
        $ref: "#/definitions/task"
      todos:
        type: array
        description: Array of todos
        items:
          $ref: "#/definitions/todo"
  project:
    type: object
    required:
      - id
      - title
      - description
    properties:
      id:
        type: integer
        format: int64
        readOnly: true
      title:
        type: string
        description: "title of a project"
      description:
        type: string
        description: "description of the project"
#
paths:
  /ping:
    get:
      operationId: getPing
      responses:
        200:
          description: server is operational
          schema:
            type: string
            description: Server is up
        500:
          description: server is not responding
          schema:
            type: string
            description: Server is down
  /project:
    get:
      operationId: getProjects
      responses:
        200:
          description: Get all the projects
          schema:
            type: array
            description: array of all the projects
            items:
              $ref: "#/definitions/project"
    post:
      operationId: createProject
      description: Create a new project
      parameters:
        - name: body
          in: body
          schema:
            type: object
            required:
              - title
            properties:
              title:
                type: string
                description: "title of a project"
              description:
                type: string
                description: "description of the project"
      responses:
        200:
          description: success message
          schema:
            type: string
            description: success
  /project/{projectId}:
    get:
      operationId: getProject
      description: gets a project with its associated tasks and todos
      parameters:
        - $ref: "#/parameters/path_projectId"
      responses:
        200:
          description: successful request
          schema:
            type: object
            properties:
              project:
                $ref: "#/definitions/project"
              tasks:
                type: array
                items:
                  $ref: "#/definitions/taskTodos"
    delete:
      operationId: deleteProject
      description: deletes a Project and all associated tasks and todos
      parameters:
        - $ref: "#/parameters/path_projectId"
      responses:
        200:
          description: successfully deleted
          schema:
            type: string
            description: success
  /task:
    get:
      operationId: getTasks
      responses:
        200:
          description: Get all the tasks
          schema:
            type: array
            description: array of all the tasks
            items:
              $ref: "#/definitions/task"
        400:
          description: Incomplete data
          schema:
            type: string
            description: Body of the request was incomplete
    post:
      operationId: createTask
      parameters:
        - name: body
          in: body
          schema:
            type: object
            required:
              - title
              - projectId
            properties:
              title:
                type: string
                description: Title of task
              projectId:
                type: string
                description: id of project task belongs to
      responses:
        200:
          description: Created task
          schema:
            $ref: "#/definitions/task"
        400:
          description: Incomplete data
          schema:
            type: string
            description: Body of the request was Incomplete
  /task/{taskId}:
    get:
      operationId: getTaskTodos
      parameters:
        - $ref: "#/parameters/path_taskId"
      responses:
        200:
          description: Get the todos associated to a task
          schema:
            type: object
            description: the task and associated todos
            properties:
              task:
                $ref: "#/definitions/task"
              todos:
                type: array
                description: Array of todos
                items:
                  $ref: "#/definitions/todo"
    delete:
      operationId: deleteTask
      parameters:
        - $ref: "#/parameters/path_taskId"
      responses:
        200:
          description: Delete a task and associated todos
          schema:
            type: string
            description: success message
  /task/{taskId}/todo:
    post:
      operationId: createTaskTodo
      parameters:
        - $ref: "#/parameters/path_taskId"
        - name: body
          in: body
          schema:
            type: object
            description: Body request
            properties:
              todo:
                type: string
                description: content of the todo
      responses:
        200:
          description: success message
          schema:
            type: string
            description: operation was successful
  /todo/{todoId}:
    delete:
      operationId: deleteTodo
      parameters:
        - $ref: "#/parameters/path_todoId"
      responses:
        200:
          description: Delete a todo
          schema:
            type: string
            description: Successfully deleted a todo
  /todo/{todoId}/status:
    post:
      operationId: setTodoStatus
      parameters:
        - $ref: "#/parameters/path_todoId"
        - name: body
          in: body
          schema:
            $ref: "#/definitions/todoStatus"
      responses:
        200:
          description: Updated the status of todo
          schema:
            type: string
            description: Successfully updated todo