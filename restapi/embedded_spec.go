// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "as in title",
    "title": "Just a Todo",
    "version": "1.0.0"
  },
  "paths": {
    "/ping": {
      "get": {
        "responses": {
          "200": {
            "description": "server is operational",
            "schema": {
              "description": "Server is up",
              "type": "string"
            }
          },
          "500": {
            "description": "server is not responding",
            "schema": {
              "description": "Server is down",
              "type": "string"
            }
          }
        }
      }
    },
    "/todo": {
      "get": {
        "responses": {
          "200": {
            "description": "Get all todos",
            "schema": {
              "description": "array of all the todos",
              "type": "array",
              "items": {
                "$ref": "#/definitions/todo"
              }
            }
          },
          "400": {
            "description": "Incomplete data",
            "schema": {
              "description": "Body of the request was Incomplete",
              "type": "string"
            }
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/todo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/todo"
            }
          },
          "400": {
            "description": "Incomplete data",
            "schema": {
              "description": "Body of the request was Incomplete",
              "type": "string"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "task": {
      "type": "object",
      "required": [
        "done"
      ],
      "properties": {
        "done": {
          "type": "boolean"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        }
      }
    },
    "todo": {
      "type": "object",
      "required": [
        "taskId",
        "todo",
        "done"
      ],
      "properties": {
        "done": {
          "type": "boolean"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "taskId": {
          "description": "task it is associated with",
          "type": "integer",
          "format": "int64"
        },
        "todo": {
          "description": "the content of the todo",
          "type": "string"
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "as in title",
    "title": "Just a Todo",
    "version": "1.0.0"
  },
  "paths": {
    "/ping": {
      "get": {
        "responses": {
          "200": {
            "description": "server is operational",
            "schema": {
              "description": "Server is up",
              "type": "string"
            }
          },
          "500": {
            "description": "server is not responding",
            "schema": {
              "description": "Server is down",
              "type": "string"
            }
          }
        }
      }
    },
    "/todo": {
      "get": {
        "responses": {
          "200": {
            "description": "Get all todos",
            "schema": {
              "description": "array of all the todos",
              "type": "array",
              "items": {
                "$ref": "#/definitions/todo"
              }
            }
          },
          "400": {
            "description": "Incomplete data",
            "schema": {
              "description": "Body of the request was Incomplete",
              "type": "string"
            }
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/todo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/todo"
            }
          },
          "400": {
            "description": "Incomplete data",
            "schema": {
              "description": "Body of the request was Incomplete",
              "type": "string"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "task": {
      "type": "object",
      "required": [
        "done"
      ],
      "properties": {
        "done": {
          "type": "boolean"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        }
      }
    },
    "todo": {
      "type": "object",
      "required": [
        "taskId",
        "todo",
        "done"
      ],
      "properties": {
        "done": {
          "type": "boolean"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "taskId": {
          "description": "task it is associated with",
          "type": "integer",
          "format": "int64"
        },
        "todo": {
          "description": "the content of the todo",
          "type": "string"
        }
      }
    }
  }
}`))
}
