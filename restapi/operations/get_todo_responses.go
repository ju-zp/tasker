// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/ju-zp/tasker/models"
)

// GetTodoOKCode is the HTTP code returned for type GetTodoOK
const GetTodoOKCode int = 200

/*GetTodoOK Get all todos

swagger:response getTodoOK
*/
type GetTodoOK struct {

	/*array of all the todos
	  In: Body
	*/
	Payload []*models.Todo `json:"body,omitempty"`
}

// NewGetTodoOK creates GetTodoOK with default headers values
func NewGetTodoOK() *GetTodoOK {

	return &GetTodoOK{}
}

// WithPayload adds the payload to the get todo o k response
func (o *GetTodoOK) WithPayload(payload []*models.Todo) *GetTodoOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get todo o k response
func (o *GetTodoOK) SetPayload(payload []*models.Todo) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTodoOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.Todo, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetTodoBadRequestCode is the HTTP code returned for type GetTodoBadRequest
const GetTodoBadRequestCode int = 400

/*GetTodoBadRequest Incomplete data

swagger:response getTodoBadRequest
*/
type GetTodoBadRequest struct {

	/*Body of the request was Incomplete
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewGetTodoBadRequest creates GetTodoBadRequest with default headers values
func NewGetTodoBadRequest() *GetTodoBadRequest {

	return &GetTodoBadRequest{}
}

// WithPayload adds the payload to the get todo bad request response
func (o *GetTodoBadRequest) WithPayload(payload string) *GetTodoBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get todo bad request response
func (o *GetTodoBadRequest) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTodoBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
