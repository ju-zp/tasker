// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/ju-zp/tasker/models"
)

// PostTodoOKCode is the HTTP code returned for type PostTodoOK
const PostTodoOKCode int = 200

/*PostTodoOK Created

swagger:response postTodoOK
*/
type PostTodoOK struct {

	/*
	  In: Body
	*/
	Payload *models.Todo `json:"body,omitempty"`
}

// NewPostTodoOK creates PostTodoOK with default headers values
func NewPostTodoOK() *PostTodoOK {

	return &PostTodoOK{}
}

// WithPayload adds the payload to the post todo o k response
func (o *PostTodoOK) WithPayload(payload *models.Todo) *PostTodoOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post todo o k response
func (o *PostTodoOK) SetPayload(payload *models.Todo) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostTodoOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostTodoBadRequestCode is the HTTP code returned for type PostTodoBadRequest
const PostTodoBadRequestCode int = 400

/*PostTodoBadRequest Incomplete data

swagger:response postTodoBadRequest
*/
type PostTodoBadRequest struct {

	/*Body of the request was Incomplete
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewPostTodoBadRequest creates PostTodoBadRequest with default headers values
func NewPostTodoBadRequest() *PostTodoBadRequest {

	return &PostTodoBadRequest{}
}

// WithPayload adds the payload to the post todo bad request response
func (o *PostTodoBadRequest) WithPayload(payload string) *PostTodoBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post todo bad request response
func (o *PostTodoBadRequest) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostTodoBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
